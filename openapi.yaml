openapi: 3.0.3
info:
  title: Filesystem Auth REST
  version: "1.0"
servers:
  - url: /
components:

  securitySchemes:
    XApiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: API key identifier used to select the matching secret.
    Authorization:
      type: apiKey
      in: header
      name: authorization
      description: >
        Bearer authentication, use `Authorization: Bearer <api-secret>`

  schemas:
    Username:
      type: string
      nullable: false
      minimum: 2
      maximum: 128
      pattern: '^[A-Za-z0-9._-]+$'

  parameters:
    UsernameParam:
      name: username
      in: path
      required: true
      schema: { $ref: '#/components/schemas/Username' }
      description: Resource identifier

security:
  - XApiKey: [ ]
    Authorization: [ ]

paths:

  /api/authz/lookup/{username}:
    get:
      operationId: AuthzLookupUser
      parameters:
        - $ref: '#/components/parameters/UsernameParam'
      summary: Lookup user POSIX attributes
      tags: [ Authz ]
      responses:
        "204":
          description: Found (user enabled). Attributes via headers (no body).
          headers:
            x-fs-uid: { schema: { type: integer, minimum: 0, maximum: 4294967295 } }
            x-fs-gid: { schema: { type: integer, minimum: 0, maximum: 4294967295 } }
            x-fs-home: { schema: { type: string } }
        "400": { description: Bad request }
        "401": { description: API client not authenticated }
        "404": { description: Not found or disabled }
        "500": { description: Internal Server error }

  /api/authz/auth/{username}:
    post:
      operationId: AuthzAuth  User
      parameters:
        - $ref: '#/components/parameters/UsernameParam'
      summary: "Authenticate user, ensure the account is not locked, and return the UID, GID, and home directory to grant access."
      tags: [ Authz ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [ password ]
              properties:
                password: { type: string }
                client_ip: { type: string, format: ipv4 }
                server_ip: { type: string, format: ipv4 }
                protocol: { type: string }
      responses:
        "204":
          description: Authenticated and enabled (no body).
        "400": { description: Bad request }
        "401": { description: API client not authenticated. }
        "403": { description: User authentication failed (invalid username/password). }
        "423": { description: User account is disabled. }
        "500": { description: Internal Server error }
